import { Injectable } from '@nestjs/common';
import { ExportPptxDto, SlideDto } from './dto/export-pptx.dto';

@Injectable()
export class ExportService {
  async generatePptx(exportData: ExportPptxDto): Promise<Buffer> {
    // Dynamic import to handle module compatibility
    const PptxGenJS = require('pptxgenjs');
    const pptx = new PptxGenJS();
    
    // Set presentation properties
    pptx.author = 'PitchDeck AI';
    pptx.company = 'Generated by PitchDeck AI';
    pptx.title = exportData.deckTitle;
    pptx.subject = exportData.deckDescription || 'AI-Generated Pitch Deck';
    
    // Define slide layout
    pptx.defineLayout({ name: 'LAYOUT_16x9', width: 10, height: 5.625 });
    pptx.layout = 'LAYOUT_16x9';
    
    // Title slide
    const titleSlide = pptx.addSlide();
    titleSlide.addText(exportData.deckTitle, {
      x: 1,
      y: 1.5,
      w: 8,
      h: 1.5,
      fontSize: 32,
      bold: true,
      align: 'center',
      color: '363636'
    });
    
    if (exportData.deckDescription) {
      titleSlide.addText(exportData.deckDescription, {
        x: 1,
        y: 3,
        w: 8,
        h: 1,
        fontSize: 16,
        align: 'center',
        color: '666666'
      });
    }
    
    titleSlide.addText(`Generated on ${new Date().toLocaleDateString()}`, {
      x: 1,
      y: 4.5,
      w: 8,
      h: 0.5,
      fontSize: 12,
      align: 'center',
      color: '999999'
    });
    
    // Add content slides
    for (let i = 0; i < exportData.slides.length; i++) {
      const slide = exportData.slides[i];
      const pptxSlide = pptx.addSlide();
      
      // Slide number
      pptxSlide.addText(`${i + 1} / ${exportData.slides.length}`, {
        x: 8.5,
        y: 0.2,
        w: 1.5,
        h: 0.3,
        fontSize: 10,
        align: 'right',
        color: '999999'
      });
      
      // Slide title
      pptxSlide.addText(slide.title, {
        x: 0.5,
        y: 0.5,
        w: 9,
        h: 0.8,
        fontSize: 24,
        bold: true,
        color: '363636'
      });
      
      // Slide content
      const processedContent = slide.content
        .replace(/•/g, '• ')
        .split('\n')
        .filter(line => line.trim())
        .slice(0, 12); // Limit to prevent overflow
      
      let yPos = 1.5;
      const lineHeight = 0.25;
      
      for (const line of processedContent) {
        if (yPos > 4.5) break; // Prevent overflow
        
        pptxSlide.addText(line.trim(), {
          x: 0.5,
          y: yPos,
          w: 9,
          h: lineHeight,
          fontSize: 14,
          color: '444444',
          lineSpacing: 20
        });
        yPos += lineHeight;
      }
      
      // Add suggested images as text
      if (slide.suggestedImages && slide.suggestedImages.length > 0 && yPos < 4.5) {
        pptxSlide.addText('Suggested Images:', {
          x: 0.5,
          y: yPos + 0.2,
          w: 9,
          h: 0.3,
          fontSize: 12,
          bold: true,
          color: '666666'
        });
        
        const imageText = slide.suggestedImages.slice(0, 3).map(img => `• ${img}`).join('\n');
        pptxSlide.addText(imageText, {
          x: 0.5,
          y: yPos + 0.5,
          w: 9,
          h: 0.8,
          fontSize: 10,
          color: '777777'
        });
      }
    }
    
    // Add notes slide if there are speaker notes
    const slidesWithNotes = exportData.slides.filter(s => s.speakerNotes);
    if (slidesWithNotes.length > 0) {
      const notesSlide = pptx.addSlide();
      notesSlide.addText('Speaker Notes', {
        x: 0.5,
        y: 0.5,
        w: 9,
        h: 0.8,
        fontSize: 24,
        bold: true,
        color: '363636'
      });
      
      let yPos = 1.5;
      for (const slide of slidesWithNotes) {
        if (yPos > 4.5) break;
        
        notesSlide.addText(`${slide.title}:`, {
          x: 0.5,
          y: yPos,
          w: 9,
          h: 0.3,
          fontSize: 14,
          bold: true,
          color: '444444'
        });
        
        const notesText = slide.speakerNotes!.substring(0, 200) + (slide.speakerNotes!.length > 200 ? '...' : '');
        notesSlide.addText(notesText, {
          x: 0.5,
          y: yPos + 0.3,
          w: 9,
          h: 0.5,
          fontSize: 12,
          color: '666666'
        });
        
        yPos += 0.9;
      }
    }
    
    // Generate the PPTX file as a buffer
    const pptxBuffer = await pptx.write({ outputType: 'nodebuffer' }) as Buffer;
    return pptxBuffer;
  }
}
